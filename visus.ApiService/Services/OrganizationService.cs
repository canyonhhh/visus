using visus.ApiService.Services.Interfaces;
using visus.Data.Repositories.Interfaces;
using visus.Models.DTOs;
using visus.Models.Entities;
using System.Collections.Generic;
using System.Linq;
using System.Threading.Tasks;

namespace visus.ApiService.Services
{
    public class OrganizationService : IOrganizationService
    {
        private readonly IOrganizationRepository _organizationRepository;

        public OrganizationService(IOrganizationRepository organizationRepository)
        {
            _organizationRepository = organizationRepository;
        }

        public async Task<IEnumerable<OrganizationDto>> GetAllOrganizationsAsync()
        {
            var organizations = await _organizationRepository.GetAllAsync();
            return organizations.Select(o => new OrganizationDto
            {
                Id = o.Id,
                Name = o.Name,
            });
        }

        public async Task<OrganizationDto?> GetOrganizationByIdAsync(string id)
        {
            var organization = await _organizationRepository.GetByIdAsync(id);
            if (organization == null)
                return null;

            return new OrganizationDto
            {
                Id = organization.Id,
                Name = organization.Name,
            };
        }

        public async Task<OrganizationDto> CreateOrganizationAsync(CreateOrganizationDto organizationDto)
        {
            if (organizationDto == null)
            {
                throw new ArgumentNullException(nameof(organizationDto), "Organization data is null.");
            }

            // Create the new organization from the DTO
            var organization = new Organization
            {
                Name = organizationDto.Name
                // Map other properties as needed
            };

            // Add the new organization to the repository (this will handle the ID generation)
            await _organizationRepository.CreateAsync(organization);

            // Return the created organization, which will now have an autogenerated Id
            return new OrganizationDto
            {
                Id = organization.Id,
                Name = organization.Name,
            };
        }


        public async Task UpdateOrganizationAsync(string id, UpdateOrganizationDto organizationDto)
        {
            // Ensure the organization exists in the database using the id from the route
            var organization = await _organizationRepository.GetByIdAsync(id);
            if (organization == null)
            {
                throw new KeyNotFoundException("Organization not found.");
            }

            // Update the organization's properties with the data from the DTO
            organization.Name = organizationDto.Name;

            // Update other properties if needed (depending on your DTO fields)

            // Perform the update in the repository
            await _organizationRepository.UpdateAsync(organization);
        }


        public async Task DeleteOrganizationAsync(string id)
        {
            var organization = await _organizationRepository.GetByIdAsync(id);
            if (organization != null)
            {
                await _organizationRepository.DeleteAsync(organization);
            }
        }
    }
}
